{"ast":null,"code":"function _typeof(obj) {\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nimport { parsePhoneNumberFromString } from 'libphonenumber-js/core';\n/**\r\n * Formats a phone number.\r\n * Is a proxy for `libphonenumber-js`'s `.format()` function of a parsed `PhoneNumber`.\r\n * @param  {string} value\r\n * @param  {string} [format]\r\n * @param  {object} metadata\r\n * @return {string}\r\n */\n\nexport default function formatPhoneNumber(value, format, metadata) {\n  if (!metadata) {\n    if (_typeof(format) === 'object') {\n      metadata = format;\n      format = 'NATIONAL';\n    }\n  }\n\n  if (!value) {\n    return '';\n  }\n\n  var phoneNumber = parsePhoneNumberFromString(value, metadata);\n\n  if (!phoneNumber) {\n    return '';\n  } // Deprecated.\n  // Legacy `format`s.\n\n\n  switch (format) {\n    case 'National':\n      format = 'NATIONAL';\n      break;\n\n    case 'International':\n      format = 'INTERNATIONAL';\n      break;\n  }\n\n  return phoneNumber.format(format);\n}\nexport function formatPhoneNumberIntl(value, metadata) {\n  return formatPhoneNumber(value, 'INTERNATIONAL', metadata);\n}","map":{"version":3,"mappings":";;;;;;;;;;;;;;AAAA,SAASA,0BAAT,QAA2C,wBAA3C;AAEA;;;;;;;;;AAQA,eAAe,SAASC,iBAAT,CAA2BC,KAA3B,EAAkCC,MAAlC,EAA0CC,QAA1C,EAAoD;EAClE,IAAI,CAACA,QAAL,EAAe;IACd,IAAIC,QAAOF,MAAP,MAAkB,QAAtB,EAAgC;MAC/BC,QAAQ,GAAGD,MAAXC;MACAD,MAAM,GAAG,UAATA;IACA;EACD;;EACD,IAAI,CAACD,KAAL,EAAY;IACX,OAAO,EAAP;EACA;;EACD,IAAMI,WAAW,GAAGN,0BAA0B,CAACE,KAAD,EAAQE,QAAR,CAA9C;;EACA,IAAI,CAACE,WAAL,EAAkB;IACjB,OAAO,EAAP;EAZiE,EAclE;EACA;;;EACA,QAAQH,MAAR;IACC,KAAK,UAAL;MACCA,MAAM,GAAG,UAATA;MACA;;IACD,KAAK,eAAL;MACCA,MAAM,GAAG,eAATA;MACA;EANF;;EAQA,OAAOG,WAAW,CAACH,MAAZG,CAAmBH,MAAnBG,CAAP;AACA;AAED,OAAO,SAASC,qBAAT,CAA+BL,KAA/B,EAAsCE,QAAtC,EAAgD;EACtD,OAAOH,iBAAiB,CAACC,KAAD,EAAQ,eAAR,EAAyBE,QAAzB,CAAxB;AACA","names":["parsePhoneNumberFromString","formatPhoneNumber","value","format","metadata","_typeof","phoneNumber","formatPhoneNumberIntl"],"sources":["../../source/libphonenumber/formatPhoneNumber.js"],"sourcesContent":["import { parsePhoneNumberFromString } from 'libphonenumber-js/core'\r\n\r\n/**\r\n * Formats a phone number.\r\n * Is a proxy for `libphonenumber-js`'s `.format()` function of a parsed `PhoneNumber`.\r\n * @param  {string} value\r\n * @param  {string} [format]\r\n * @param  {object} metadata\r\n * @return {string}\r\n */\r\nexport default function formatPhoneNumber(value, format, metadata) {\r\n\tif (!metadata) {\r\n\t\tif (typeof format === 'object') {\r\n\t\t\tmetadata = format\r\n\t\t\tformat = 'NATIONAL'\r\n\t\t}\r\n\t}\r\n\tif (!value) {\r\n\t\treturn ''\r\n\t}\r\n\tconst phoneNumber = parsePhoneNumberFromString(value, metadata)\r\n\tif (!phoneNumber) {\r\n\t\treturn ''\r\n\t}\r\n\t// Deprecated.\r\n\t// Legacy `format`s.\r\n\tswitch (format) {\r\n\t\tcase 'National':\r\n\t\t\tformat = 'NATIONAL'\r\n\t\t\tbreak\r\n\t\tcase 'International':\r\n\t\t\tformat = 'INTERNATIONAL'\r\n\t\t\tbreak\r\n\t}\r\n\treturn phoneNumber.format(format)\r\n}\r\n\r\nexport function formatPhoneNumberIntl(value, metadata) {\r\n\treturn formatPhoneNumber(value, 'INTERNATIONAL', metadata)\r\n}"]},"metadata":{},"sourceType":"module"}