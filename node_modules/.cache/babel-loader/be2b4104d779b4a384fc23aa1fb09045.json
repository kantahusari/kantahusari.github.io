{"ast":null,"code":"function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport { normalizeArguments } from './parsePhoneNumber';\nimport PhoneNumberMatcher from './PhoneNumberMatcher';\n/**\r\n * @return ES6 `for ... of` iterator.\r\n */\n\nexport default function searchNumbers() {\n  var _normalizeArguments = normalizeArguments(arguments),\n      text = _normalizeArguments.text,\n      options = _normalizeArguments.options,\n      metadata = _normalizeArguments.metadata;\n\n  var matcher = new PhoneNumberMatcher(text, options, metadata);\n  return _defineProperty({}, Symbol.iterator, function () {\n    return {\n      next: function next() {\n        if (matcher.hasNext()) {\n          return {\n            done: false,\n            value: matcher.next()\n          };\n        }\n\n        return {\n          done: true\n        };\n      }\n    };\n  });\n}","map":{"version":3,"mappings":";;;;;;;;;;;;;;;AAAA,SAASA,kBAAT,QAAmC,oBAAnC;AACA,OAAOC,kBAAP,MAA+B,sBAA/B;AAEA;;;;AAGA,eAAe,SAASC,aAAT,GACf;EAAA,0BACqCF,kBAAkB,CAACG,SAAD,CADvD;EAAA,IACSC,IADT,uBACSA,IADT;EAAA,IACeC,OADf,uBACeA,OADf;EAAA,IACwBC,QADxB,uBACwBA,QADxB;;EAGC,IAAMC,OAAO,GAAG,IAAIN,kBAAJ,CAAuBG,IAAvB,EAA6BC,OAA7B,EAAsCC,QAAtC,CAAhB;EAEA,2BACEE,MAAM,CAACC,QADT,cACqB;IACnB,OAAO;MACHC,IAAI,EAAE,gBAAM;QACX,IAAIH,OAAO,CAACI,OAARJ,EAAJ,EAAuB;UACzB,OAAO;YACNK,IAAI,EAAE,KADA;YAENC,KAAK,EAAEN,OAAO,CAACG,IAARH;UAFD,CAAP;QAIA;;QACD,OAAO;UACNK,IAAI,EAAE;QADA,CAAP;MAGG;IAXE,CAAP;EAFF;AAiBA","names":["normalizeArguments","PhoneNumberMatcher","searchNumbers","arguments","text","options","metadata","matcher","Symbol","iterator","next","hasNext","done","value"],"sources":["../source/searchNumbers.js"],"sourcesContent":["import { normalizeArguments } from './parsePhoneNumber'\r\nimport PhoneNumberMatcher from './PhoneNumberMatcher'\r\n\r\n/**\r\n * @return ES6 `for ... of` iterator.\r\n */\r\nexport default function searchNumbers()\r\n{\r\n\tconst { text, options, metadata } = normalizeArguments(arguments)\r\n\r\n\tconst matcher = new PhoneNumberMatcher(text, options, metadata)\r\n\r\n\treturn  {\r\n\t\t[Symbol.iterator]() {\r\n\t\t\treturn {\r\n\t    \t\tnext: () => {\r\n\t    \t\t\tif (matcher.hasNext()) {\r\n\t\t\t\t\t\treturn {\r\n\t\t\t\t\t\t\tdone: false,\r\n\t\t\t\t\t\t\tvalue: matcher.next()\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn {\r\n\t\t\t\t\t\tdone: true\r\n\t\t\t\t\t}\r\n\t    \t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n"]},"metadata":{},"sourceType":"module"}