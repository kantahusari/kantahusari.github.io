{"ast":null,"code":"// Gets <input/> selection bounds\nexport function getSelection(element) {\n  // If no selection, return nothing\n  if (element.selectionStart === element.selectionEnd) {\n    return;\n  }\n\n  return {\n    start: element.selectionStart,\n    end: element.selectionEnd\n  };\n} // Key codes\n\nexport var Keys = {\n  Backspace: 8,\n  Delete: 46\n}; // Finds out the operation to be intercepted and performed\n// based on the key down event `keyCode`.\n\nexport function getOperation(event) {\n  switch (event.keyCode) {\n    case Keys.Backspace:\n      return 'Backspace';\n\n    case Keys.Delete:\n      return 'Delete';\n  }\n} // Gets <input/> caret position\n\nexport function getCaretPosition(element) {\n  return element.selectionStart;\n} // Sets <input/> caret position\n\nexport function setCaretPosition(element, caret_position) {\n  // Sanity check\n  if (caret_position === undefined) {\n    return;\n  } // Set caret position.\n  // There has been an issue with caret positioning on Android devices.\n  // https://github.com/catamphetamine/input-format/issues/2\n  // I was revisiting this issue and looked for similar issues in other libraries.\n  // For example, there's [`text-mask`](https://github.com/text-mask/text-mask) library.\n  // They've had exactly the same issue when the caret seemingly refused to be repositioned programmatically.\n  // The symptoms were the same: whenever the caret passed through a non-digit character of a mask (a whitespace, a bracket, a dash, etc), it looked as if it placed itself one character before its correct position.\n  // https://github.com/text-mask/text-mask/issues/300\n  // They seem to have found a basic fix for it: calling `input.setSelectionRange()` in a timeout rather than instantly for Android devices.\n  // https://github.com/text-mask/text-mask/pull/400/files\n  // I've implemented the same workaround here.\n\n\n  if (isAndroid()) {\n    setTimeout(function () {\n      return element.setSelectionRange(caret_position, caret_position);\n    }, 0);\n  } else {\n    element.setSelectionRange(caret_position, caret_position);\n  }\n}\n\nfunction isAndroid() {\n  // `navigator` is not defined when running mocha tests.\n  if (typeof navigator !== 'undefined') {\n    return ANDROID_USER_AGENT_REG_EXP.test(navigator.userAgent);\n  }\n}\n\nvar ANDROID_USER_AGENT_REG_EXP = /Android/i;","map":{"version":3,"mappings":"AAAA;AACA,OAAO,SAASA,YAAT,CAAsBC,OAAtB,EACP;EACC;EACA,IAAIA,OAAO,CAACC,cAARD,KAA2BA,OAAO,CAACE,YAAvC,EACA;IACC;EACA;;EAED,OAAO;IAAEC,KAAK,EAAEH,OAAO,CAACC,cAAjB;IAAiCG,GAAG,EAAEJ,OAAO,CAACE;EAA9C,CAAP;EAGD;;AACA,OAAO,IAAMG,IAAI,GACjB;EACCC,SAAS,EAAG,CADb;EAECC,MAAM,EAAM;AAFb,CADO,C,CAMP;AACA;;AACA,OAAO,SAASC,YAAT,CAAsBC,KAAtB,EACP;EACC,QAAQA,KAAK,CAACC,OAAd;IAEC,KAAKL,IAAI,CAACC,SAAV;MACC,OAAO,WAAP;;IAED,KAAKD,IAAI,CAACE,MAAV;MACC,OAAO,QAAP;EANF;EAUD;;AACA,OAAO,SAASI,gBAAT,CAA0BX,OAA1B,EACP;EACC,OAAOA,OAAO,CAACC,cAAf;EAGD;;AACA,OAAO,SAASW,gBAAT,CAA0BZ,OAA1B,EAAmCa,cAAnC,EACP;EACC;EACA,IAAIA,cAAc,KAAKC,SAAvB,EACA;IACC;EAJF,EAOC;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;;EACA,IAAIC,SAAS,EAAb,EAAiB;IACZC,UAAU,CAAC;MAAA,OAAMhB,OAAO,CAACiB,iBAARjB,CAA0Ba,cAA1Bb,EAA0Ca,cAA1Cb,CAAN;IAAD,GAAkE,CAAlE,CAAVgB;EADL,OAEO;IACNhB,OAAO,CAACiB,iBAARjB,CAA0Ba,cAA1Bb,EAA0Ca,cAA1Cb;EACA;AACD;;AAED,SAASe,SAAT,GAAqB;EACpB;EACA,IAAI,OAAOG,SAAP,KAAqB,WAAzB,EAAsC;IACrC,OAAOC,0BAA0B,CAACC,IAA3BD,CAAgCD,SAAS,CAACG,SAA1CF,CAAP;EACA;AACD;;AAED,IAAMA,0BAA0B,GAAG,UAAnC","names":["getSelection","element","selectionStart","selectionEnd","start","end","Keys","Backspace","Delete","getOperation","event","keyCode","getCaretPosition","setCaretPosition","caret_position","undefined","isAndroid","setTimeout","setSelectionRange","navigator","ANDROID_USER_AGENT_REG_EXP","test","userAgent"],"sources":["../source/dom.js"],"sourcesContent":["// Gets <input/> selection bounds\r\nexport function getSelection(element)\r\n{\r\n\t// If no selection, return nothing\r\n\tif (element.selectionStart === element.selectionEnd)\r\n\t{\r\n\t\treturn\r\n\t}\r\n\r\n\treturn { start: element.selectionStart, end: element.selectionEnd }\r\n}\r\n\r\n// Key codes\r\nexport const Keys =\r\n{\r\n\tBackspace : 8,\r\n\tDelete    : 46\r\n}\r\n\r\n// Finds out the operation to be intercepted and performed\r\n// based on the key down event `keyCode`.\r\nexport function getOperation(event)\r\n{\r\n\tswitch (event.keyCode)\r\n\t{\r\n\t\tcase Keys.Backspace:\r\n\t\t\treturn 'Backspace'\r\n\r\n\t\tcase Keys.Delete:\r\n\t\t\treturn 'Delete'\r\n\t}\r\n}\r\n\r\n// Gets <input/> caret position\r\nexport function getCaretPosition(element)\r\n{\r\n\treturn element.selectionStart\r\n}\r\n\r\n// Sets <input/> caret position\r\nexport function setCaretPosition(element, caret_position)\r\n{\r\n\t// Sanity check\r\n\tif (caret_position === undefined)\r\n\t{\r\n\t\treturn\r\n\t}\r\n\r\n\t// Set caret position.\r\n\t// There has been an issue with caret positioning on Android devices.\r\n\t// https://github.com/catamphetamine/input-format/issues/2\r\n\t// I was revisiting this issue and looked for similar issues in other libraries.\r\n\t// For example, there's [`text-mask`](https://github.com/text-mask/text-mask) library.\r\n\t// They've had exactly the same issue when the caret seemingly refused to be repositioned programmatically.\r\n\t// The symptoms were the same: whenever the caret passed through a non-digit character of a mask (a whitespace, a bracket, a dash, etc), it looked as if it placed itself one character before its correct position.\r\n\t// https://github.com/text-mask/text-mask/issues/300\r\n\t// They seem to have found a basic fix for it: calling `input.setSelectionRange()` in a timeout rather than instantly for Android devices.\r\n\t// https://github.com/text-mask/text-mask/pull/400/files\r\n\t// I've implemented the same workaround here.\r\n\tif (isAndroid()) {\r\n      setTimeout(() => element.setSelectionRange(caret_position, caret_position), 0)\r\n\t} else {\r\n\t\telement.setSelectionRange(caret_position, caret_position)\r\n\t}\r\n}\r\n\r\nfunction isAndroid() {\r\n\t// `navigator` is not defined when running mocha tests.\r\n\tif (typeof navigator !== 'undefined') {\r\n\t\treturn ANDROID_USER_AGENT_REG_EXP.test(navigator.userAgent)\r\n\t}\r\n}\r\n\r\nconst ANDROID_USER_AGENT_REG_EXP = /Android/i"]},"metadata":{},"sourceType":"module"}