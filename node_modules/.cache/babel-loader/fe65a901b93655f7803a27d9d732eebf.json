{"ast":null,"code":"import { parsePhoneNumberFromString, getCountryCallingCode, AsYouType, Metadata } from 'libphonenumber-js/core';\nimport getInternationalPhoneNumberPrefix from './getInternationalPhoneNumberPrefix';\n/**\r\n * Decides which country should be pre-selected\r\n * when the phone number input component is first mounted.\r\n * @param  {object?} phoneNumber - An instance of `PhoneNumber` class.\r\n * @param  {string?} country - Pre-defined country (two-letter code).\r\n * @param  {string[]?} countries - A list of countries available.\r\n * @param  {object} metadata - `libphonenumber-js` metadata\r\n * @return {string?}\r\n */\n\nexport function getPreSelectedCountry(_ref) {\n  var value = _ref.value,\n      phoneNumber = _ref.phoneNumber,\n      defaultCountry = _ref.defaultCountry,\n      getAnyCountry = _ref.getAnyCountry,\n      countries = _ref.countries,\n      required = _ref.required,\n      metadata = _ref.metadata;\n  var country; // If can get country from E.164 phone number\n  // then it overrides the `country` passed (or not passed).\n\n  if (phoneNumber && phoneNumber.country) {\n    // `country` will be left `undefined` in case of non-detection.\n    country = phoneNumber.country;\n  } else if (defaultCountry) {\n    if (!value || couldNumberBelongToCountry(value, defaultCountry, metadata)) {\n      country = defaultCountry;\n    }\n  } // Only pre-select a country if it's in the available `countries` list.\n\n\n  if (countries && countries.indexOf(country) < 0) {\n    country = undefined;\n  } // If there will be no \"International\" option\n  // then some `country` must be selected.\n  // It will still be the wrong country though.\n  // But still country `<select/>` can't be left in a broken state.\n\n\n  if (!country && required && countries && countries.length > 0) {\n    country = getAnyCountry(); // noCountryMatchesTheNumber = true\n  }\n\n  return country;\n}\n/**\r\n * Generates a sorted list of country `<select/>` options.\r\n * @param  {string[]} countries - A list of two-letter (\"ISO 3166-1 alpha-2\") country codes.\r\n * @param  {object} labels - Custom country labels. E.g. `{ RU: 'Россия', US: 'США', ... }`.\r\n * @param  {boolean} addInternationalOption - Whether should include \"International\" option at the top of the list.\r\n * @return {object[]} A list of objects having shape `{ value : string, label : string }`.\r\n */\n\nexport function getCountrySelectOptions(_ref2) {\n  var countries = _ref2.countries,\n      countryNames = _ref2.countryNames,\n      addInternationalOption = _ref2.addInternationalOption,\n      compareStringsLocales = _ref2.compareStringsLocales,\n      _compareStrings = _ref2.compareStrings; // Default country name comparator uses `String.localeCompare()`.\n\n  if (!_compareStrings) {\n    _compareStrings = compareStrings;\n  } // Generates a `<Select/>` option for each country.\n\n\n  var countrySelectOptions = countries.map(function (country) {\n    return {\n      value: country,\n      // All `locale` country names included in this library\n      // include all countries (this is checked at build time).\n      // The only case when a country name might be missing\n      // is when a developer supplies their own `labels` property.\n      // To guard against such cases, a missing country name\n      // is substituted by country code.\n      label: countryNames[country] || country\n    };\n  }); // Sort the list of countries alphabetically.\n\n  countrySelectOptions.sort(function (a, b) {\n    return _compareStrings(a.label, b.label, compareStringsLocales);\n  }); // Add the \"International\" option to the country list (if suitable)\n\n  if (addInternationalOption) {\n    countrySelectOptions.unshift({\n      label: countryNames.ZZ\n    });\n  }\n\n  return countrySelectOptions;\n}\n/**\r\n * Parses a E.164 phone number to an instance of `PhoneNumber` class.\r\n * @param {string?} value = E.164 phone number.\r\n * @param  {object} metadata - `libphonenumber-js` metadata\r\n * @return {object} Object having shape `{ country: string?, countryCallingCode: string, number: string }`. `PhoneNumber`: https://gitlab.com/catamphetamine/libphonenumber-js#phonenumber.\r\n * @example\r\n * parsePhoneNumber('+78005553535')\r\n */\n\nexport function parsePhoneNumber(value, metadata) {\n  return parsePhoneNumberFromString(value || '', metadata);\n}\n/**\r\n * Generates national number digits for a parsed phone.\r\n * May prepend national prefix.\r\n * The phone number must be a complete and valid phone number.\r\n * @param  {object} phoneNumber - An instance of `PhoneNumber` class.\r\n * @param  {object} metadata - `libphonenumber-js` metadata\r\n * @return {string}\r\n * @example\r\n * getNationalNumberDigits({ country: 'RU', phone: '8005553535' })\r\n * // returns '88005553535'\r\n */\n\nexport function generateNationalNumberDigits(phoneNumber) {\n  return phoneNumber.formatNational().replace(/\\D/g, '');\n}\n/**\r\n * Migrates parsed `<input/>` `value` for the newly selected `country`.\r\n * @param {string?} phoneDigits - Phone number digits (and `+`) parsed from phone number `<input/>` (it's not the same as the `value` property).\r\n * @param {string?} prevCountry - Previously selected country.\r\n * @param {string?} newCountry - Newly selected country. Can't be same as previously selected country.\r\n * @param {object} metadata - `libphonenumber-js` metadata.\r\n * @param {boolean} useNationalFormat - whether should attempt to convert from international to national number for the new country.\r\n * @return {string?}\r\n */\n\nexport function getPhoneDigitsForNewCountry(phoneDigits, _ref3) {\n  var prevCountry = _ref3.prevCountry,\n      newCountry = _ref3.newCountry,\n      metadata = _ref3.metadata,\n      useNationalFormat = _ref3.useNationalFormat; // If `parsed_input` is empty\n  // then no need to migrate anything.\n\n  if (!phoneDigits) {\n    if (useNationalFormat) {\n      return '';\n    } else {\n      // If `phoneDigits` is empty then set `phoneDigits` to\n      // `+{getCountryCallingCode(newCountry)}`.\n      return getInternationalPhoneNumberPrefix(newCountry, metadata);\n    }\n  } // If switching to some country.\n  // (from \"International\" or another country)\n  // If switching from \"International\" then `phoneDigits` starts with a `+`.\n  // Otherwise it may or may not start with a `+`.\n\n\n  if (newCountry) {\n    // If the phone number was entered in international format\n    // then migrate it to the newly selected country.\n    // The phone number may be incomplete.\n    // The phone number entered not necessarily starts with\n    // the previously selected country phone prefix.\n    if (phoneDigits[0] === '+') {\n      // If the international phone number is for the new country\n      // then convert it to local if required.\n      if (useNationalFormat) {\n        // // If a phone number is being input in international form\n        // // and the country can already be derived from it,\n        // // and if it is the new country, then format as a national number.\n        // const derived_country = getCountryFromPossiblyIncompleteInternationalPhoneNumber(phoneDigits, metadata)\n        // if (derived_country === newCountry) {\n        // \treturn stripCountryCallingCode(phoneDigits, derived_country, metadata)\n        // }\n        // Actually, the two countries don't necessarily need to match:\n        // the condition could be looser here, because several countries\n        // might share the same international phone number format\n        // (for example, \"NANPA\" countries like US, Canada, etc).\n        // The looser condition would be just \"same nternational phone number format\"\n        // which would mean \"same country calling code\" in the context of `libphonenumber-js`.\n        if (phoneDigits.indexOf('+' + getCountryCallingCode(newCountry, metadata)) === 0) {\n          return stripCountryCallingCode(phoneDigits, newCountry, metadata);\n        } // Simply discard the previously entered international phone number,\n        // because otherwise any \"smart\" transformation like getting the\n        // \"national (significant) number\" part and then prepending the\n        // newly selected country's \"country calling code\" to it\n        // would just be confusing for a user without being actually useful.\n\n\n        return ''; // // Simply strip the leading `+` character\n        // // therefore simply converting all digits into a \"local\" phone number.\n        // // https://github.com/catamphetamine/react-phone-number-input/issues/287\n        // return phoneDigits.slice(1)\n      }\n\n      if (prevCountry) {\n        var newCountryPrefix = getInternationalPhoneNumberPrefix(newCountry, metadata);\n\n        if (phoneDigits.indexOf(newCountryPrefix) === 0) {\n          return phoneDigits;\n        } else {\n          return newCountryPrefix;\n        }\n      } else {\n        var defaultValue = getInternationalPhoneNumberPrefix(newCountry, metadata); // If `phoneDigits`'s country calling code part is the same\n        // as for the new `country`, then leave `phoneDigits` as is.\n\n        if (phoneDigits.indexOf(defaultValue) === 0) {\n          return phoneDigits;\n        } // If `phoneDigits`'s country calling code part is not the same\n        // as for the new `country`, then set `phoneDigits` to\n        // `+{getCountryCallingCode(newCountry)}`.\n\n\n        return defaultValue;\n      } // // If the international phone number already contains\n      // // any country calling code then trim the country calling code part.\n      // // (that could also be the newly selected country phone code prefix as well)\n      // // `phoneDigits` doesn't neccessarily belong to `prevCountry`.\n      // // (e.g. if a user enters an international number\n      // //  not belonging to any of the reduced `countries` list).\n      // phoneDigits = stripCountryCallingCode(phoneDigits, prevCountry, metadata)\n      // // Prepend country calling code prefix\n      // // for the newly selected country.\n      // return e164(phoneDigits, newCountry, metadata) || `+${getCountryCallingCode(newCountry, metadata)}`\n\n    }\n  } // If switching to \"International\" from a country.\n  else {\n    // If the phone number was entered in national format.\n    if (phoneDigits[0] !== '+') {\n      // Format the national phone number as an international one.\n      // The phone number entered not necessarily even starts with\n      // the previously selected country phone prefix.\n      // Even if the phone number belongs to whole another country\n      // it will still be parsed into some national phone number.\n      return e164(phoneDigits, prevCountry, metadata) || '';\n    }\n  }\n\n  return phoneDigits;\n}\n/**\r\n * Converts phone number digits to a (possibly incomplete) E.164 phone number.\r\n * @param  {string?} number - A possibly incomplete phone number digits string. Can be a possibly incomplete E.164 phone number.\r\n * @param  {string?} country\r\n * @param  {[object} metadata - `libphonenumber-js` metadata.\r\n * @return {string?}\r\n */\n\nexport function e164(number, country, metadata) {\n  if (!number) {\n    return;\n  } // If the phone number is being input in international format.\n\n\n  if (number[0] === '+') {\n    // If it's just the `+` sign then return nothing.\n    if (number === '+') {\n      return;\n    } // If there are any digits then the `value` is returned as is.\n\n\n    return number;\n  } // For non-international phone numbers\n  // an accompanying country code is required.\n\n\n  if (!country) {\n    return;\n  }\n\n  var partial_national_significant_number = getNationalSignificantNumberDigits(number, country, metadata);\n\n  if (partial_national_significant_number) {\n    return \"+\".concat(getCountryCallingCode(country, metadata)).concat(partial_national_significant_number);\n  }\n}\n/**\r\n * Trims phone number digits if they exceed the maximum possible length\r\n * for a national (significant) number for the country.\r\n * @param  {string} number - A possibly incomplete phone number digits string. Can be a possibly incomplete E.164 phone number.\r\n * @param  {string} country\r\n * @param  {object} metadata - `libphonenumber-js` metadata.\r\n * @return {string} Can be empty.\r\n */\n\nexport function trimNumber(number, country, metadata) {\n  var nationalSignificantNumberPart = getNationalSignificantNumberDigits(number, country, metadata);\n\n  if (nationalSignificantNumberPart) {\n    var overflowDigitsCount = nationalSignificantNumberPart.length - getMaxNumberLength(country, metadata);\n\n    if (overflowDigitsCount > 0) {\n      return number.slice(0, number.length - overflowDigitsCount);\n    }\n  }\n\n  return number;\n}\n\nfunction getMaxNumberLength(country, metadata) {\n  // Get \"possible lengths\" for a phone number of the country.\n  metadata = new Metadata(metadata);\n  metadata.country(country); // Return the last \"possible length\".\n\n  return metadata.numberingPlan.possibleLengths()[metadata.numberingPlan.possibleLengths().length - 1];\n} // If the phone number being input is an international one\n// then tries to derive the country from the phone number.\n// (regardless of whether there's any country currently selected)\n\n/**\r\n * @param {string} partialE164Number - A possibly incomplete E.164 phone number.\r\n * @param {string?} country - Currently selected country.\r\n * @param {string[]?} countries - A list of available countries. If not passed then \"all countries\" are assumed.\r\n * @param  {object} metadata - `libphonenumber-js` metadata.\r\n * @return {string?}\r\n */\n\n\nexport function getCountryForPartialE164Number(partialE164Number, _ref4) {\n  var country = _ref4.country,\n      countries = _ref4.countries,\n      required = _ref4.required,\n      metadata = _ref4.metadata;\n\n  if (partialE164Number === '+') {\n    // Don't change the currently selected country yet.\n    return country;\n  }\n\n  var derived_country = getCountryFromPossiblyIncompleteInternationalPhoneNumber(partialE164Number, metadata); // If a phone number is being input in international form\n  // and the country can already be derived from it,\n  // then select that country.\n\n  if (derived_country && (!countries || countries.indexOf(derived_country) >= 0)) {\n    return derived_country;\n  } // If \"International\" country option has not been disabled\n  // and the international phone number entered doesn't correspond\n  // to the currently selected country then reset the currently selected country.\n  else if (country && !required && !couldNumberBelongToCountry(partialE164Number, country, metadata)) {\n    return undefined;\n  } // Don't change the currently selected country.\n\n\n  return country;\n}\n/**\r\n * Parses `<input/>` value. Derives `country` from `input`. Derives an E.164 `value`.\r\n * @param  {string?} phoneDigits — Parsed `<input/>` value. Examples: `\"\"`, `\"+\"`, `\"+123\"`, `\"123\"`.\r\n * @param  {string?} prevPhoneDigits — Previous parsed `<input/>` value. Examples: `\"\"`, `\"+\"`, `\"+123\"`, `\"123\"`.\r\n * @param  {string?} country - Currently selected country.\r\n * @param  {boolean} countryRequired - Is selecting some country required.\r\n * @param  {function} getAnyCountry - Can be used to get any country when selecting some country required.\r\n * @param  {string[]?} countries - A list of available countries. If not passed then \"all countries\" are assumed.\r\n * @param  {boolean} international - Set to `true` to force international phone number format (leading `+`). Set to `false` to force \"national\" phone number format. Is `undefined` by default.\r\n * @param  {boolean} limitMaxLength — Whether to enable limiting phone number max length.\r\n * @param  {object} metadata - `libphonenumber-js` metadata.\r\n * @return {object} An object of shape `{ input, country, value }`.\r\n */\n\nexport function onPhoneDigitsChange(phoneDigits, _ref5) {\n  var prevPhoneDigits = _ref5.prevPhoneDigits,\n      country = _ref5.country,\n      defaultCountry = _ref5.defaultCountry,\n      countryRequired = _ref5.countryRequired,\n      getAnyCountry = _ref5.getAnyCountry,\n      countries = _ref5.countries,\n      international = _ref5.international,\n      limitMaxLength = _ref5.limitMaxLength,\n      countryCallingCodeEditable = _ref5.countryCallingCodeEditable,\n      metadata = _ref5.metadata;\n\n  if (international && countryCallingCodeEditable === false) {\n    var prefix = getInternationalPhoneNumberPrefix(country, metadata); // The `<input/>` value must start with the country calling code.\n\n    if (phoneDigits.indexOf(prefix) !== 0) {\n      var _value; // If a phone number input is declared as\n      // `international` and `withCountryCallingCode`,\n      // then it's gonna be non-empty even before the user\n      // has input anything in it.\n      // This will result in its contents (the country calling code part)\n      // being selected when the user tabs into such field.\n      // If the user then starts inputting the national part digits,\n      // then `<input/>` value changes from `+xxx` to `y`\n      // because inputting anything while having the `<input/>` value\n      // selected results in erasing the `<input/>` value\n      // So, the component handles such case by restoring\n      // the intended `<input/>`` value: `+xxxy`.\n      // https://gitlab.com/catamphetamine/react-phone-number-input/-/issues/43\n\n\n      if (phoneDigits && phoneDigits[0] !== '+') {\n        phoneDigits = prefix + phoneDigits;\n        _value = phoneDigits;\n      } else {\n        phoneDigits = prefix;\n      }\n\n      return {\n        phoneDigits: phoneDigits,\n        value: _value,\n        country: country\n      };\n    }\n  } // If `international` property is `false`, then it means\n  // \"enforce national-only format during input\",\n  // so, if that's the case, then remove all `+` characters,\n  // but only if some country is currently selected.\n  // (not if \"International\" country is selected).\n\n\n  if (international === false && country && phoneDigits && phoneDigits[0] === '+') {\n    phoneDigits = convertInternationalPhoneDigitsToNational(phoneDigits, country, metadata);\n  } // Trim the input to not exceed the maximum possible number length.\n\n\n  if (phoneDigits && country && limitMaxLength) {\n    phoneDigits = trimNumber(phoneDigits, country, metadata);\n  } // If this `onChange()` event was triggered\n  // as a result of selecting \"International\" country,\n  // then force-prepend a `+` sign if the phone number\n  // `<input/>` value isn't in international format.\n  // Also, force-prepend a `+` sign if international\n  // phone number input format is set.\n\n\n  if (phoneDigits && phoneDigits[0] !== '+' && (!country || international)) {\n    phoneDigits = '+' + phoneDigits;\n  } // If the previously entered phone number\n  // has been entered in international format\n  // and the user decides to erase it,\n  // then also reset the `country`\n  // because it was most likely automatically selected\n  // while the user was typing in the phone number\n  // in international format.\n  // This fixes the issue when a user is presented\n  // with a phone number input with no country selected\n  // and then types in their local phone number\n  // then discovers that the input's messed up\n  // (a `+` has been prepended at the start of their input\n  //  and a random country has been selected),\n  // decides to undo it all by erasing everything\n  // and then types in their local phone number again\n  // resulting in a seemingly correct phone number\n  // but in reality that phone number has incorrect country.\n  // https://github.com/catamphetamine/react-phone-number-input/issues/273\n\n\n  if (!phoneDigits && prevPhoneDigits && prevPhoneDigits[0] === '+') {\n    if (international) {\n      country = undefined;\n    } else {\n      country = defaultCountry;\n    }\n  } // Also resets such \"randomly\" selected country\n  // as soon as the user erases the number\n  // digit-by-digit up to the leading `+` sign.\n\n\n  if (phoneDigits === '+' && prevPhoneDigits && prevPhoneDigits[0] === '+' && prevPhoneDigits.length > '+'.length) {\n    country = undefined;\n  } // Generate the new `value` property.\n\n\n  var value;\n\n  if (phoneDigits) {\n    if (phoneDigits[0] === '+') {\n      if (phoneDigits === '+') {\n        value = undefined;\n      } else if (country && getInternationalPhoneNumberPrefix(country, metadata).indexOf(phoneDigits) === 0) {\n        value = undefined;\n      } else {\n        value = phoneDigits;\n      }\n    } else {\n      value = e164(phoneDigits, country, metadata);\n    }\n  } // Derive the country from the phone number.\n  // (regardless of whether there's any country currently selected,\n  //  because there could be several countries corresponding to one country calling code)\n\n\n  if (value) {\n    country = getCountryForPartialE164Number(value, {\n      country: country,\n      countries: countries,\n      metadata: metadata\n    }); // If `international` property is `false`, then it means\n    // \"enforce national-only format during input\",\n    // so, if that's the case, then remove all `+` characters,\n    // but only if some country is currently selected.\n    // (not if \"International\" country is selected).\n\n    if (international === false && country && phoneDigits && phoneDigits[0] === '+') {\n      phoneDigits = convertInternationalPhoneDigitsToNational(phoneDigits, country, metadata); // Re-calculate `value` because `phoneDigits` has changed.\n\n      value = e164(phoneDigits, country, metadata);\n    }\n  }\n\n  if (!country && countryRequired) {\n    country = defaultCountry || getAnyCountry();\n  }\n\n  return {\n    phoneDigits: phoneDigits,\n    country: country,\n    value: value\n  };\n}\n\nfunction convertInternationalPhoneDigitsToNational(input, country, metadata) {\n  // Handle the case when a user might have pasted\n  // a phone number in international format.\n  if (input.indexOf(getInternationalPhoneNumberPrefix(country, metadata)) === 0) {\n    // Create \"as you type\" formatter.\n    var formatter = new AsYouType(country, metadata); // Input partial national phone number.\n\n    formatter.input(input); // Return the parsed partial national phone number.\n\n    var phoneNumber = formatter.getNumber();\n\n    if (phoneNumber) {\n      // Transform the number to a national one,\n      // and remove all non-digits.\n      return phoneNumber.formatNational().replace(/\\D/g, '');\n    } else {\n      return '';\n    }\n  } else {\n    // Just remove the `+` sign.\n    return input.replace(/\\D/g, '');\n  }\n}\n/**\r\n * Determines the country for a given (possibly incomplete) E.164 phone number.\r\n * @param  {string} number - A possibly incomplete E.164 phone number.\r\n * @param  {object} metadata - `libphonenumber-js` metadata.\r\n * @return {string?}\r\n */\n\n\nexport function getCountryFromPossiblyIncompleteInternationalPhoneNumber(number, metadata) {\n  var formatter = new AsYouType(null, metadata);\n  formatter.input(number); // // `001` is a special \"non-geograpical entity\" code\n  // // in Google's `libphonenumber` library.\n  // if (formatter.getCountry() === '001') {\n  // \treturn\n  // }\n\n  return formatter.getCountry();\n}\n/**\r\n * Compares two strings.\r\n * A helper for `Array.sort()`.\r\n * @param {string} a — First string.\r\n * @param {string} b — Second string.\r\n * @param {(string[]|string)} [locales] — The `locales` argument of `String.localeCompare`.\r\n */\n\nexport function compareStrings(a, b, locales) {\n  // Use `String.localeCompare` if it's available.\n  // https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Global_Objects/String/localeCompare\n  // Which means everyone except IE <= 10 and Safari <= 10.\n  // `localeCompare()` is available in latest Node.js versions.\n\n  /* istanbul ignore else */\n  if (String.prototype.localeCompare) {\n    return a.localeCompare(b, locales);\n  }\n  /* istanbul ignore next */\n\n\n  return a < b ? -1 : a > b ? 1 : 0;\n}\n/**\r\n * Strips `+${countryCallingCode}` prefix from an E.164 phone number.\r\n * @param {string} number - (possibly incomplete) E.164 phone number.\r\n * @param {string?} country - A possible country for this phone number.\r\n * @param {object} metadata - `libphonenumber-js` metadata.\r\n * @return {string}\r\n */\n\nexport function stripCountryCallingCode(number, country, metadata) {\n  // Just an optimization, so that it\n  // doesn't have to iterate through all country calling codes.\n  if (country) {\n    var countryCallingCodePrefix = '+' + getCountryCallingCode(country, metadata); // If `country` fits the actual `number`.\n\n    if (number.length < countryCallingCodePrefix.length) {\n      if (countryCallingCodePrefix.indexOf(number) === 0) {\n        return '';\n      }\n    } else {\n      if (number.indexOf(countryCallingCodePrefix) === 0) {\n        return number.slice(countryCallingCodePrefix.length);\n      }\n    }\n  } // If `country` doesn't fit the actual `number`.\n  // Try all available country calling codes.\n\n\n  for (var _i = 0, _Object$keys = Object.keys(metadata.country_calling_codes); _i < _Object$keys.length; _i++) {\n    var country_calling_code = _Object$keys[_i];\n\n    if (number.indexOf(country_calling_code) === '+'.length) {\n      return number.slice('+'.length + country_calling_code.length);\n    }\n  }\n\n  return '';\n}\n/**\r\n * Parses a partially entered national phone number digits\r\n * (or a partially entered E.164 international phone number)\r\n * and returns the national significant number part.\r\n * National significant number returned doesn't come with a national prefix.\r\n * @param {string} number - National number digits. Or possibly incomplete E.164 phone number.\r\n * @param {string?} country\r\n * @param {object} metadata - `libphonenumber-js` metadata.\r\n * @return {string} [result]\r\n */\n\nexport function getNationalSignificantNumberDigits(number, country, metadata) {\n  // Create \"as you type\" formatter.\n  var formatter = new AsYouType(country, metadata); // Input partial national phone number.\n\n  formatter.input(number); // Return the parsed partial national phone number.\n\n  var phoneNumber = formatter.getNumber();\n  return phoneNumber && phoneNumber.nationalNumber;\n}\n/**\r\n * Checks if a partially entered E.164 phone number could belong to a country.\r\n * @param  {string} number\r\n * @param  {string} country\r\n * @return {boolean}\r\n */\n\nexport function couldNumberBelongToCountry(number, country, metadata) {\n  var intlPhoneNumberPrefix = getInternationalPhoneNumberPrefix(country, metadata);\n  var i = 0;\n\n  while (i < number.length && i < intlPhoneNumberPrefix.length) {\n    if (number[i] !== intlPhoneNumberPrefix[i]) {\n      return false;\n    }\n\n    i++;\n  }\n\n  return true;\n}\n/**\r\n * Gets initial \"phone digits\" (including `+`, if using international format).\r\n * @return {string} [phoneDigits] Returns `undefined` if there should be no initial \"phone digits\".\r\n */\n\nexport function getInitialPhoneDigits(_ref6) {\n  var value = _ref6.value,\n      phoneNumber = _ref6.phoneNumber,\n      defaultCountry = _ref6.defaultCountry,\n      international = _ref6.international,\n      useNationalFormat = _ref6.useNationalFormat,\n      metadata = _ref6.metadata; // If the `value` (E.164 phone number)\n  // belongs to the currently selected country\n  // and `useNationalFormat` is `true`\n  // then convert `value` (E.164 phone number)\n  // to a local phone number digits.\n  // E.g. '+78005553535' -> '88005553535'.\n\n  if ((international === false || useNationalFormat) && phoneNumber && phoneNumber.country) {\n    return generateNationalNumberDigits(phoneNumber);\n  } // If `international` property is `true`,\n  // meaning \"enforce international phone number format\",\n  // then always show country calling code in the input field.\n\n\n  if (!value && international && defaultCountry) {\n    return getInternationalPhoneNumberPrefix(defaultCountry, metadata);\n  }\n\n  return value;\n}","map":{"version":3,"mappings":"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","names":["parsePhoneNumberFromString","getCountryCallingCode","AsYouType","Metadata","getInternationalPhoneNumberPrefix","getPreSelectedCountry","value","phoneNumber","defaultCountry","getAnyCountry","countries","required","metadata","country","couldNumberBelongToCountry","indexOf","undefined","length","getCountrySelectOptions","countryNames","addInternationalOption","compareStringsLocales","_compareStrings","compareStrings","countrySelectOptions","map","label","sort","a","b","unshift","ZZ","parsePhoneNumber","generateNationalNumberDigits","formatNational","replace","getPhoneDigitsForNewCountry","phoneDigits","prevCountry","newCountry","useNationalFormat","stripCountryCallingCode","newCountryPrefix","defaultValue","e164","number","partial_national_significant_number","getNationalSignificantNumberDigits","trimNumber","nationalSignificantNumberPart","overflowDigitsCount","getMaxNumberLength","slice","numberingPlan","possibleLengths","getCountryForPartialE164Number","partialE164Number","derived_country","getCountryFromPossiblyIncompleteInternationalPhoneNumber","onPhoneDigitsChange","prevPhoneDigits","countryRequired","international","limitMaxLength","countryCallingCodeEditable","prefix","convertInternationalPhoneDigitsToNational","input","formatter","getNumber","getCountry","locales","String","prototype","localeCompare","countryCallingCodePrefix","Object","keys","country_calling_codes","country_calling_code","nationalNumber","intlPhoneNumberPrefix","i","getInitialPhoneDigits"],"sources":["../../source/helpers/phoneInputHelpers.js"],"sourcesContent":["import {\r\n\tparsePhoneNumberFromString,\r\n\tgetCountryCallingCode,\r\n\tAsYouType,\r\n\tMetadata\r\n} from 'libphonenumber-js/core'\r\n\r\nimport getInternationalPhoneNumberPrefix from './getInternationalPhoneNumberPrefix'\r\n\r\n/**\r\n * Decides which country should be pre-selected\r\n * when the phone number input component is first mounted.\r\n * @param  {object?} phoneNumber - An instance of `PhoneNumber` class.\r\n * @param  {string?} country - Pre-defined country (two-letter code).\r\n * @param  {string[]?} countries - A list of countries available.\r\n * @param  {object} metadata - `libphonenumber-js` metadata\r\n * @return {string?}\r\n */\r\nexport function getPreSelectedCountry({\r\n\tvalue,\r\n\tphoneNumber,\r\n\tdefaultCountry,\r\n\tgetAnyCountry,\r\n\tcountries,\r\n\trequired,\r\n\tmetadata\r\n}) {\r\n\tlet country\r\n\r\n\t// If can get country from E.164 phone number\r\n\t// then it overrides the `country` passed (or not passed).\r\n\tif (phoneNumber && phoneNumber.country) {\r\n\t\t// `country` will be left `undefined` in case of non-detection.\r\n\t\tcountry = phoneNumber.country\r\n\t} else if (defaultCountry) {\r\n\t\tif (!value || couldNumberBelongToCountry(value, defaultCountry, metadata)) {\r\n\t\t\tcountry = defaultCountry\r\n\t\t}\r\n\t}\r\n\r\n\t// Only pre-select a country if it's in the available `countries` list.\r\n\tif (countries && countries.indexOf(country) < 0) {\r\n\t\tcountry = undefined\r\n\t}\r\n\r\n\t// If there will be no \"International\" option\r\n\t// then some `country` must be selected.\r\n\t// It will still be the wrong country though.\r\n\t// But still country `<select/>` can't be left in a broken state.\r\n\tif (!country && required && countries && countries.length > 0) {\r\n\t\tcountry = getAnyCountry()\r\n\t\t// noCountryMatchesTheNumber = true\r\n\t}\r\n\r\n\treturn country\r\n}\r\n\r\n/**\r\n * Generates a sorted list of country `<select/>` options.\r\n * @param  {string[]} countries - A list of two-letter (\"ISO 3166-1 alpha-2\") country codes.\r\n * @param  {object} labels - Custom country labels. E.g. `{ RU: 'Россия', US: 'США', ... }`.\r\n * @param  {boolean} addInternationalOption - Whether should include \"International\" option at the top of the list.\r\n * @return {object[]} A list of objects having shape `{ value : string, label : string }`.\r\n */\r\nexport function getCountrySelectOptions({\r\n\tcountries,\r\n\tcountryNames,\r\n\taddInternationalOption,\r\n\t// `locales` are only used in country name comparator:\r\n\t// depending on locale, string sorting order could be different.\r\n\tcompareStringsLocales,\r\n\tcompareStrings: _compareStrings\r\n}) {\r\n\t// Default country name comparator uses `String.localeCompare()`.\r\n\tif (!_compareStrings) {\r\n\t\t_compareStrings = compareStrings\r\n\t}\r\n\r\n\t// Generates a `<Select/>` option for each country.\r\n\tconst countrySelectOptions = countries.map((country) => ({\r\n\t\tvalue: country,\r\n\t\t// All `locale` country names included in this library\r\n\t\t// include all countries (this is checked at build time).\r\n\t\t// The only case when a country name might be missing\r\n\t\t// is when a developer supplies their own `labels` property.\r\n\t\t// To guard against such cases, a missing country name\r\n\t\t// is substituted by country code.\r\n\t\tlabel: countryNames[country] || country\r\n\t}))\r\n\r\n\t// Sort the list of countries alphabetically.\r\n\tcountrySelectOptions.sort((a, b) => _compareStrings(a.label, b.label, compareStringsLocales))\r\n\r\n\t// Add the \"International\" option to the country list (if suitable)\r\n\tif (addInternationalOption) {\r\n\t\tcountrySelectOptions.unshift({\r\n\t\t\tlabel: countryNames.ZZ\r\n\t\t})\r\n\t}\r\n\r\n\treturn countrySelectOptions\r\n}\r\n\r\n/**\r\n * Parses a E.164 phone number to an instance of `PhoneNumber` class.\r\n * @param {string?} value = E.164 phone number.\r\n * @param  {object} metadata - `libphonenumber-js` metadata\r\n * @return {object} Object having shape `{ country: string?, countryCallingCode: string, number: string }`. `PhoneNumber`: https://gitlab.com/catamphetamine/libphonenumber-js#phonenumber.\r\n * @example\r\n * parsePhoneNumber('+78005553535')\r\n */\r\nexport function parsePhoneNumber(value, metadata) {\r\n\treturn parsePhoneNumberFromString(value || '', metadata)\r\n}\r\n\r\n/**\r\n * Generates national number digits for a parsed phone.\r\n * May prepend national prefix.\r\n * The phone number must be a complete and valid phone number.\r\n * @param  {object} phoneNumber - An instance of `PhoneNumber` class.\r\n * @param  {object} metadata - `libphonenumber-js` metadata\r\n * @return {string}\r\n * @example\r\n * getNationalNumberDigits({ country: 'RU', phone: '8005553535' })\r\n * // returns '88005553535'\r\n */\r\nexport function generateNationalNumberDigits(phoneNumber) {\r\n\treturn phoneNumber.formatNational().replace(/\\D/g, '')\r\n}\r\n\r\n/**\r\n * Migrates parsed `<input/>` `value` for the newly selected `country`.\r\n * @param {string?} phoneDigits - Phone number digits (and `+`) parsed from phone number `<input/>` (it's not the same as the `value` property).\r\n * @param {string?} prevCountry - Previously selected country.\r\n * @param {string?} newCountry - Newly selected country. Can't be same as previously selected country.\r\n * @param {object} metadata - `libphonenumber-js` metadata.\r\n * @param {boolean} useNationalFormat - whether should attempt to convert from international to national number for the new country.\r\n * @return {string?}\r\n */\r\nexport function getPhoneDigitsForNewCountry(phoneDigits, {\r\n\tprevCountry,\r\n\tnewCountry,\r\n\tmetadata,\r\n\tuseNationalFormat\r\n}) {\r\n\t// If `parsed_input` is empty\r\n\t// then no need to migrate anything.\r\n\tif (!phoneDigits) {\r\n\t\tif (useNationalFormat) {\r\n\t\t\treturn ''\r\n\t\t} else {\r\n\t\t\t// If `phoneDigits` is empty then set `phoneDigits` to\r\n\t\t\t// `+{getCountryCallingCode(newCountry)}`.\r\n\t\t\treturn getInternationalPhoneNumberPrefix(newCountry, metadata)\r\n\t\t}\r\n\t}\r\n\r\n\t// If switching to some country.\r\n\t// (from \"International\" or another country)\r\n\t// If switching from \"International\" then `phoneDigits` starts with a `+`.\r\n\t// Otherwise it may or may not start with a `+`.\r\n\tif (newCountry) {\r\n\t\t// If the phone number was entered in international format\r\n\t\t// then migrate it to the newly selected country.\r\n\t\t// The phone number may be incomplete.\r\n\t\t// The phone number entered not necessarily starts with\r\n\t\t// the previously selected country phone prefix.\r\n\t\tif (phoneDigits[0] === '+') {\r\n\t\t\t// If the international phone number is for the new country\r\n\t\t\t// then convert it to local if required.\r\n\t\t\tif (useNationalFormat) {\r\n\t\t\t\t// // If a phone number is being input in international form\r\n\t\t\t\t// // and the country can already be derived from it,\r\n\t\t\t\t// // and if it is the new country, then format as a national number.\r\n\t\t\t\t// const derived_country = getCountryFromPossiblyIncompleteInternationalPhoneNumber(phoneDigits, metadata)\r\n\t\t\t\t// if (derived_country === newCountry) {\r\n\t\t\t\t// \treturn stripCountryCallingCode(phoneDigits, derived_country, metadata)\r\n\t\t\t\t// }\r\n\r\n\t\t\t\t// Actually, the two countries don't necessarily need to match:\r\n\t\t\t\t// the condition could be looser here, because several countries\r\n\t\t\t\t// might share the same international phone number format\r\n\t\t\t\t// (for example, \"NANPA\" countries like US, Canada, etc).\r\n\t\t\t\t// The looser condition would be just \"same nternational phone number format\"\r\n\t\t\t\t// which would mean \"same country calling code\" in the context of `libphonenumber-js`.\r\n\t\t\t\tif (phoneDigits.indexOf('+' + getCountryCallingCode(newCountry, metadata)) === 0) {\r\n\t\t\t\t\treturn stripCountryCallingCode(phoneDigits, newCountry, metadata)\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// Simply discard the previously entered international phone number,\r\n\t\t\t\t// because otherwise any \"smart\" transformation like getting the\r\n\t\t\t\t// \"national (significant) number\" part and then prepending the\r\n\t\t\t\t// newly selected country's \"country calling code\" to it\r\n\t\t\t\t// would just be confusing for a user without being actually useful.\r\n\t\t\t\treturn ''\r\n\r\n\t\t\t\t// // Simply strip the leading `+` character\r\n\t\t\t\t// // therefore simply converting all digits into a \"local\" phone number.\r\n\t\t\t\t// // https://github.com/catamphetamine/react-phone-number-input/issues/287\r\n\t\t\t\t// return phoneDigits.slice(1)\r\n\t\t\t}\r\n\r\n\t\t\tif (prevCountry) {\r\n\t\t\t\tconst newCountryPrefix = getInternationalPhoneNumberPrefix(newCountry, metadata)\r\n\t\t\t\tif (phoneDigits.indexOf(newCountryPrefix) === 0) {\r\n\t\t\t\t\treturn phoneDigits\r\n\t\t\t\t} else {\r\n\t\t\t\t\treturn newCountryPrefix\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\tconst defaultValue = getInternationalPhoneNumberPrefix(newCountry, metadata)\r\n\t\t\t\t// If `phoneDigits`'s country calling code part is the same\r\n\t\t\t\t// as for the new `country`, then leave `phoneDigits` as is.\r\n\t\t\t\tif (phoneDigits.indexOf(defaultValue) === 0) {\r\n\t\t\t\t\treturn phoneDigits\r\n\t\t\t\t}\r\n\t\t\t\t// If `phoneDigits`'s country calling code part is not the same\r\n\t\t\t\t// as for the new `country`, then set `phoneDigits` to\r\n\t\t\t\t// `+{getCountryCallingCode(newCountry)}`.\r\n\t\t\t\treturn defaultValue\r\n\t\t\t}\r\n\r\n\t\t\t// // If the international phone number already contains\r\n\t\t\t// // any country calling code then trim the country calling code part.\r\n\t\t\t// // (that could also be the newly selected country phone code prefix as well)\r\n\t\t\t// // `phoneDigits` doesn't neccessarily belong to `prevCountry`.\r\n\t\t\t// // (e.g. if a user enters an international number\r\n\t\t\t// //  not belonging to any of the reduced `countries` list).\r\n\t\t\t// phoneDigits = stripCountryCallingCode(phoneDigits, prevCountry, metadata)\r\n\r\n\t\t\t// // Prepend country calling code prefix\r\n\t\t\t// // for the newly selected country.\r\n\t\t\t// return e164(phoneDigits, newCountry, metadata) || `+${getCountryCallingCode(newCountry, metadata)}`\r\n\t\t}\r\n\t}\r\n\t// If switching to \"International\" from a country.\r\n\telse {\r\n\t\t// If the phone number was entered in national format.\r\n\t\tif (phoneDigits[0] !== '+') {\r\n\t\t\t// Format the national phone number as an international one.\r\n\t\t\t// The phone number entered not necessarily even starts with\r\n\t\t\t// the previously selected country phone prefix.\r\n\t\t\t// Even if the phone number belongs to whole another country\r\n\t\t\t// it will still be parsed into some national phone number.\r\n\t\t\treturn e164(phoneDigits, prevCountry, metadata) || ''\r\n\t\t}\r\n\t}\r\n\r\n\treturn phoneDigits\r\n}\r\n\r\n/**\r\n * Converts phone number digits to a (possibly incomplete) E.164 phone number.\r\n * @param  {string?} number - A possibly incomplete phone number digits string. Can be a possibly incomplete E.164 phone number.\r\n * @param  {string?} country\r\n * @param  {[object} metadata - `libphonenumber-js` metadata.\r\n * @return {string?}\r\n */\r\nexport function e164(number, country, metadata) {\r\n\tif (!number) {\r\n\t\treturn\r\n\t}\r\n\t// If the phone number is being input in international format.\r\n\tif (number[0] === '+') {\r\n\t\t// If it's just the `+` sign then return nothing.\r\n\t\tif (number === '+') {\r\n\t\t\treturn\r\n\t\t}\r\n\t\t// If there are any digits then the `value` is returned as is.\r\n\t\treturn number\r\n\t}\r\n\t// For non-international phone numbers\r\n\t// an accompanying country code is required.\r\n\tif (!country) {\r\n\t\treturn\r\n\t}\r\n\tconst partial_national_significant_number = getNationalSignificantNumberDigits(number, country, metadata)\r\n\tif (partial_national_significant_number) {\r\n\t\treturn `+${getCountryCallingCode(country, metadata)}${partial_national_significant_number}`\r\n\t}\r\n}\r\n\r\n/**\r\n * Trims phone number digits if they exceed the maximum possible length\r\n * for a national (significant) number for the country.\r\n * @param  {string} number - A possibly incomplete phone number digits string. Can be a possibly incomplete E.164 phone number.\r\n * @param  {string} country\r\n * @param  {object} metadata - `libphonenumber-js` metadata.\r\n * @return {string} Can be empty.\r\n */\r\nexport function trimNumber(number, country, metadata) {\r\n\tconst nationalSignificantNumberPart = getNationalSignificantNumberDigits(number, country, metadata)\r\n\tif (nationalSignificantNumberPart) {\r\n\t\tconst overflowDigitsCount = nationalSignificantNumberPart.length - getMaxNumberLength(country, metadata)\r\n\t\tif (overflowDigitsCount > 0) {\r\n\t\t\treturn number.slice(0, number.length - overflowDigitsCount)\r\n\t\t}\r\n\t}\r\n\treturn number\r\n}\r\n\r\nfunction getMaxNumberLength(country, metadata) {\r\n\t// Get \"possible lengths\" for a phone number of the country.\r\n\tmetadata = new Metadata(metadata)\r\n\tmetadata.country(country)\r\n\t// Return the last \"possible length\".\r\n\treturn metadata.numberingPlan.possibleLengths()[metadata.numberingPlan.possibleLengths().length - 1]\r\n}\r\n\r\n// If the phone number being input is an international one\r\n// then tries to derive the country from the phone number.\r\n// (regardless of whether there's any country currently selected)\r\n/**\r\n * @param {string} partialE164Number - A possibly incomplete E.164 phone number.\r\n * @param {string?} country - Currently selected country.\r\n * @param {string[]?} countries - A list of available countries. If not passed then \"all countries\" are assumed.\r\n * @param  {object} metadata - `libphonenumber-js` metadata.\r\n * @return {string?}\r\n */\r\nexport function getCountryForPartialE164Number(partialE164Number, {\r\n\tcountry,\r\n\tcountries,\r\n\trequired,\r\n\tmetadata\r\n}) {\r\n\tif (partialE164Number === '+') {\r\n\t\t// Don't change the currently selected country yet.\r\n\t\treturn country\r\n\t}\r\n\r\n\tconst derived_country = getCountryFromPossiblyIncompleteInternationalPhoneNumber(partialE164Number, metadata)\r\n\r\n\t// If a phone number is being input in international form\r\n\t// and the country can already be derived from it,\r\n\t// then select that country.\r\n\tif (derived_country && (!countries || (countries.indexOf(derived_country) >= 0))) {\r\n\t\treturn derived_country\r\n\t}\r\n\t// If \"International\" country option has not been disabled\r\n\t// and the international phone number entered doesn't correspond\r\n\t// to the currently selected country then reset the currently selected country.\r\n\telse if (country &&\r\n\t\t!required &&\r\n\t\t!couldNumberBelongToCountry(partialE164Number, country, metadata)) {\r\n\t\treturn undefined\r\n\t}\r\n\r\n\t// Don't change the currently selected country.\r\n\treturn country\r\n}\r\n\r\n/**\r\n * Parses `<input/>` value. Derives `country` from `input`. Derives an E.164 `value`.\r\n * @param  {string?} phoneDigits — Parsed `<input/>` value. Examples: `\"\"`, `\"+\"`, `\"+123\"`, `\"123\"`.\r\n * @param  {string?} prevPhoneDigits — Previous parsed `<input/>` value. Examples: `\"\"`, `\"+\"`, `\"+123\"`, `\"123\"`.\r\n * @param  {string?} country - Currently selected country.\r\n * @param  {boolean} countryRequired - Is selecting some country required.\r\n * @param  {function} getAnyCountry - Can be used to get any country when selecting some country required.\r\n * @param  {string[]?} countries - A list of available countries. If not passed then \"all countries\" are assumed.\r\n * @param  {boolean} international - Set to `true` to force international phone number format (leading `+`). Set to `false` to force \"national\" phone number format. Is `undefined` by default.\r\n * @param  {boolean} limitMaxLength — Whether to enable limiting phone number max length.\r\n * @param  {object} metadata - `libphonenumber-js` metadata.\r\n * @return {object} An object of shape `{ input, country, value }`.\r\n */\r\nexport function onPhoneDigitsChange(phoneDigits, {\r\n\tprevPhoneDigits,\r\n\tcountry,\r\n\tdefaultCountry,\r\n\tcountryRequired,\r\n\tgetAnyCountry,\r\n\tcountries,\r\n\tinternational,\r\n\tlimitMaxLength,\r\n\tcountryCallingCodeEditable,\r\n\tmetadata\r\n}) {\r\n\tif (international && countryCallingCodeEditable === false) {\r\n\t\tconst prefix = getInternationalPhoneNumberPrefix(country, metadata)\r\n\t\t// The `<input/>` value must start with the country calling code.\r\n\t\tif (phoneDigits.indexOf(prefix) !== 0) {\r\n\t\t\tlet value\r\n\t\t\t// If a phone number input is declared as\r\n\t\t\t// `international` and `withCountryCallingCode`,\r\n\t\t\t// then it's gonna be non-empty even before the user\r\n\t\t\t// has input anything in it.\r\n\t\t\t// This will result in its contents (the country calling code part)\r\n\t\t\t// being selected when the user tabs into such field.\r\n\t\t\t// If the user then starts inputting the national part digits,\r\n\t\t\t// then `<input/>` value changes from `+xxx` to `y`\r\n\t\t\t// because inputting anything while having the `<input/>` value\r\n\t\t\t// selected results in erasing the `<input/>` value\r\n\t\t\t// So, the component handles such case by restoring\r\n\t\t\t// the intended `<input/>`` value: `+xxxy`.\r\n\t\t\t// https://gitlab.com/catamphetamine/react-phone-number-input/-/issues/43\r\n\t\t\tif (phoneDigits && phoneDigits[0] !== '+') {\r\n\t\t\t\tphoneDigits = prefix + phoneDigits\r\n\t\t\t\tvalue = phoneDigits\r\n\t\t\t} else {\r\n\t\t\t\tphoneDigits = prefix\r\n\t\t\t}\r\n\t\t\treturn {\r\n\t\t\t\tphoneDigits,\r\n\t\t\t\tvalue,\r\n\t\t\t\tcountry\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t// If `international` property is `false`, then it means\r\n\t// \"enforce national-only format during input\",\r\n\t// so, if that's the case, then remove all `+` characters,\r\n\t// but only if some country is currently selected.\r\n\t// (not if \"International\" country is selected).\r\n\tif (international === false && country && phoneDigits && phoneDigits[0] === '+') {\r\n\t\tphoneDigits = convertInternationalPhoneDigitsToNational(phoneDigits, country, metadata)\r\n\t}\r\n\r\n\t// Trim the input to not exceed the maximum possible number length.\r\n\tif (phoneDigits && country && limitMaxLength) {\r\n\t\tphoneDigits = trimNumber(phoneDigits, country, metadata)\r\n\t}\r\n\r\n\t// If this `onChange()` event was triggered\r\n\t// as a result of selecting \"International\" country,\r\n\t// then force-prepend a `+` sign if the phone number\r\n\t// `<input/>` value isn't in international format.\r\n\t// Also, force-prepend a `+` sign if international\r\n\t// phone number input format is set.\r\n\tif (phoneDigits && phoneDigits[0] !== '+' && (!country || international)) {\r\n\t\tphoneDigits = '+' + phoneDigits\r\n\t}\r\n\r\n\t// If the previously entered phone number\r\n\t// has been entered in international format\r\n\t// and the user decides to erase it,\r\n\t// then also reset the `country`\r\n\t// because it was most likely automatically selected\r\n\t// while the user was typing in the phone number\r\n\t// in international format.\r\n\t// This fixes the issue when a user is presented\r\n\t// with a phone number input with no country selected\r\n\t// and then types in their local phone number\r\n\t// then discovers that the input's messed up\r\n\t// (a `+` has been prepended at the start of their input\r\n\t//  and a random country has been selected),\r\n\t// decides to undo it all by erasing everything\r\n\t// and then types in their local phone number again\r\n\t// resulting in a seemingly correct phone number\r\n\t// but in reality that phone number has incorrect country.\r\n\t// https://github.com/catamphetamine/react-phone-number-input/issues/273\r\n\tif (!phoneDigits && prevPhoneDigits && prevPhoneDigits[0] === '+') {\r\n\t\tif (international) {\r\n\t\t\tcountry = undefined\r\n\t\t} else {\r\n\t\t\tcountry = defaultCountry\r\n\t\t}\r\n\t}\r\n\t// Also resets such \"randomly\" selected country\r\n\t// as soon as the user erases the number\r\n\t// digit-by-digit up to the leading `+` sign.\r\n\tif (phoneDigits === '+' && prevPhoneDigits && prevPhoneDigits[0] === '+' && prevPhoneDigits.length > '+'.length) {\r\n\t\tcountry = undefined\r\n\t}\r\n\r\n\t// Generate the new `value` property.\r\n\tlet value\r\n\tif (phoneDigits) {\r\n\t\tif (phoneDigits[0] === '+') {\r\n\t\t\tif (phoneDigits === '+') {\r\n\t\t\t\tvalue = undefined\r\n\t\t\t} else if (country && getInternationalPhoneNumberPrefix(country, metadata).indexOf(phoneDigits) === 0) {\r\n\t\t\t\tvalue = undefined\r\n\t\t\t} else {\r\n\t\t\t\tvalue = phoneDigits\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tvalue = e164(phoneDigits, country, metadata)\r\n\t\t}\r\n\t}\r\n\r\n\t// Derive the country from the phone number.\r\n\t// (regardless of whether there's any country currently selected,\r\n\t//  because there could be several countries corresponding to one country calling code)\r\n\tif (value) {\r\n\t\tcountry = getCountryForPartialE164Number(value, {\r\n\t\t\tcountry,\r\n\t\t\tcountries,\r\n\t\t\tmetadata\r\n\t\t})\r\n\t\t// If `international` property is `false`, then it means\r\n\t\t// \"enforce national-only format during input\",\r\n\t\t// so, if that's the case, then remove all `+` characters,\r\n\t\t// but only if some country is currently selected.\r\n\t\t// (not if \"International\" country is selected).\r\n\t\tif (international === false && country && phoneDigits && phoneDigits[0] === '+') {\r\n\t\t\tphoneDigits = convertInternationalPhoneDigitsToNational(phoneDigits, country, metadata)\r\n\t\t\t// Re-calculate `value` because `phoneDigits` has changed.\r\n\t\t\tvalue = e164(phoneDigits, country, metadata)\r\n\t\t}\r\n\t}\r\n\r\n\tif (!country && countryRequired) {\r\n\t\tcountry = defaultCountry || getAnyCountry()\r\n\t}\r\n\r\n\treturn {\r\n\t\tphoneDigits,\r\n\t\tcountry,\r\n\t\tvalue\r\n\t}\r\n}\r\n\r\nfunction convertInternationalPhoneDigitsToNational(input, country, metadata) {\r\n\t// Handle the case when a user might have pasted\r\n\t// a phone number in international format.\r\n\tif (input.indexOf(getInternationalPhoneNumberPrefix(country, metadata)) === 0) {\r\n\t\t// Create \"as you type\" formatter.\r\n\t\tconst formatter = new AsYouType(country, metadata)\r\n\t\t// Input partial national phone number.\r\n\t\tformatter.input(input)\r\n\t\t// Return the parsed partial national phone number.\r\n\t\tconst phoneNumber = formatter.getNumber()\r\n\t\tif (phoneNumber) {\r\n\t\t\t// Transform the number to a national one,\r\n\t\t\t// and remove all non-digits.\r\n\t\t\treturn phoneNumber.formatNational().replace(/\\D/g, '')\r\n\t\t} else {\r\n\t\t\treturn ''\r\n\t\t}\r\n\t} else {\r\n\t\t// Just remove the `+` sign.\r\n\t\treturn input.replace(/\\D/g, '')\r\n\t}\r\n}\r\n\r\n/**\r\n * Determines the country for a given (possibly incomplete) E.164 phone number.\r\n * @param  {string} number - A possibly incomplete E.164 phone number.\r\n * @param  {object} metadata - `libphonenumber-js` metadata.\r\n * @return {string?}\r\n */\r\nexport function getCountryFromPossiblyIncompleteInternationalPhoneNumber(number, metadata) {\r\n\tconst formatter = new AsYouType(null, metadata)\r\n\tformatter.input(number)\r\n\t// // `001` is a special \"non-geograpical entity\" code\r\n\t// // in Google's `libphonenumber` library.\r\n\t// if (formatter.getCountry() === '001') {\r\n\t// \treturn\r\n\t// }\r\n\treturn formatter.getCountry()\r\n}\r\n\r\n/**\r\n * Compares two strings.\r\n * A helper for `Array.sort()`.\r\n * @param {string} a — First string.\r\n * @param {string} b — Second string.\r\n * @param {(string[]|string)} [locales] — The `locales` argument of `String.localeCompare`.\r\n */\r\nexport function compareStrings(a, b, locales) {\r\n  // Use `String.localeCompare` if it's available.\r\n  // https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Global_Objects/String/localeCompare\r\n  // Which means everyone except IE <= 10 and Safari <= 10.\r\n  // `localeCompare()` is available in latest Node.js versions.\r\n  /* istanbul ignore else */\r\n  if (String.prototype.localeCompare) {\r\n    return a.localeCompare(b, locales);\r\n  }\r\n  /* istanbul ignore next */\r\n  return a < b ? -1 : (a > b ? 1 : 0);\r\n}\r\n\r\n/**\r\n * Strips `+${countryCallingCode}` prefix from an E.164 phone number.\r\n * @param {string} number - (possibly incomplete) E.164 phone number.\r\n * @param {string?} country - A possible country for this phone number.\r\n * @param {object} metadata - `libphonenumber-js` metadata.\r\n * @return {string}\r\n */\r\nexport function stripCountryCallingCode(number, country, metadata) {\r\n\t// Just an optimization, so that it\r\n\t// doesn't have to iterate through all country calling codes.\r\n\tif (country) {\r\n\t\tconst countryCallingCodePrefix = '+' + getCountryCallingCode(country, metadata)\r\n\r\n\t\t// If `country` fits the actual `number`.\r\n\t\tif (number.length < countryCallingCodePrefix.length) {\r\n\t\t\tif (countryCallingCodePrefix.indexOf(number) === 0) {\r\n\t\t\t\treturn ''\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tif (number.indexOf(countryCallingCodePrefix) === 0) {\r\n\t\t\t\treturn number.slice(countryCallingCodePrefix.length)\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t// If `country` doesn't fit the actual `number`.\r\n\t// Try all available country calling codes.\r\n\tfor (const country_calling_code of Object.keys(metadata.country_calling_codes)) {\r\n\t\tif (number.indexOf(country_calling_code) === '+'.length) {\r\n\t\t\treturn number.slice('+'.length + country_calling_code.length)\r\n\t\t}\r\n\t}\r\n\r\n\treturn ''\r\n}\r\n\r\n/**\r\n * Parses a partially entered national phone number digits\r\n * (or a partially entered E.164 international phone number)\r\n * and returns the national significant number part.\r\n * National significant number returned doesn't come with a national prefix.\r\n * @param {string} number - National number digits. Or possibly incomplete E.164 phone number.\r\n * @param {string?} country\r\n * @param {object} metadata - `libphonenumber-js` metadata.\r\n * @return {string} [result]\r\n */\r\nexport function getNationalSignificantNumberDigits(number, country, metadata) {\r\n\t// Create \"as you type\" formatter.\r\n\tconst formatter = new AsYouType(country, metadata)\r\n\t// Input partial national phone number.\r\n\tformatter.input(number)\r\n\t// Return the parsed partial national phone number.\r\n\tconst phoneNumber = formatter.getNumber()\r\n\treturn phoneNumber && phoneNumber.nationalNumber\r\n}\r\n\r\n/**\r\n * Checks if a partially entered E.164 phone number could belong to a country.\r\n * @param  {string} number\r\n * @param  {string} country\r\n * @return {boolean}\r\n */\r\nexport function couldNumberBelongToCountry(number, country, metadata) {\r\n\tconst intlPhoneNumberPrefix = getInternationalPhoneNumberPrefix(country, metadata)\r\n\tlet i = 0\r\n\twhile (i < number.length && i < intlPhoneNumberPrefix.length) {\r\n\t\tif (number[i] !== intlPhoneNumberPrefix[i]) {\r\n\t\t\treturn false\r\n\t\t}\r\n\t\ti++\r\n\t}\r\n\treturn true\r\n}\r\n\r\n/**\r\n * Gets initial \"phone digits\" (including `+`, if using international format).\r\n * @return {string} [phoneDigits] Returns `undefined` if there should be no initial \"phone digits\".\r\n */\r\nexport function getInitialPhoneDigits({\r\n\tvalue,\r\n\tphoneNumber,\r\n\tdefaultCountry,\r\n\tinternational,\r\n\tuseNationalFormat,\r\n\tmetadata\r\n}) {\r\n\t// If the `value` (E.164 phone number)\r\n\t// belongs to the currently selected country\r\n\t// and `useNationalFormat` is `true`\r\n\t// then convert `value` (E.164 phone number)\r\n\t// to a local phone number digits.\r\n\t// E.g. '+78005553535' -> '88005553535'.\r\n\tif ((international === false || useNationalFormat) && phoneNumber && phoneNumber.country) {\r\n\t\treturn generateNationalNumberDigits(phoneNumber)\r\n\t}\r\n\t// If `international` property is `true`,\r\n\t// meaning \"enforce international phone number format\",\r\n\t// then always show country calling code in the input field.\r\n\tif (!value && international && defaultCountry) {\r\n\t\treturn getInternationalPhoneNumberPrefix(defaultCountry, metadata)\r\n\t}\r\n\treturn value\r\n}"]},"metadata":{},"sourceType":"module"}